# coding: utf-8

"""
    Url Manager Service

    The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.

    The version of the OpenAPI document: 1.0.0
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from urlmanager.api.basic_operations_api import BasicOperationsApi


class TestBasicOperationsApi(unittest.TestCase):
    """BasicOperationsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = BasicOperationsApi()

    def tearDown(self) -> None:
        pass

    def test_url_manager_change_url_rewrite_request_path(self) -> None:
        """Test case for url_manager_change_url_rewrite_request_path

        Change Url Rewrite Request Path
        """
        pass

    def test_url_manager_change_url_rewrite_request_path2(self) -> None:
        """Test case for url_manager_change_url_rewrite_request_path2

        Change Url Rewrite Request Path
        """
        pass

    def test_url_manager_create_url_rewrite(self) -> None:
        """Test case for url_manager_create_url_rewrite

        Create Url Rewrite
        """
        pass

    def test_url_manager_create_url_rewrite2(self) -> None:
        """Test case for url_manager_create_url_rewrite2

        Create Url Rewrite
        """
        pass

    def test_url_manager_delete_url_rewrite(self) -> None:
        """Test case for url_manager_delete_url_rewrite

        Delete Url Rewrite
        """
        pass

    def test_url_manager_delete_url_rewrite2(self) -> None:
        """Test case for url_manager_delete_url_rewrite2

        Delete Url Rewrite
        """
        pass

    def test_url_manager_get_url_rewrite(self) -> None:
        """Test case for url_manager_get_url_rewrite

        Get Url Rewrite
        """
        pass

    def test_url_manager_get_url_rewrite2(self) -> None:
        """Test case for url_manager_get_url_rewrite2

        Get Url Rewrite
        """
        pass

    def test_url_manager_list_url_rewrites(self) -> None:
        """Test case for url_manager_list_url_rewrites

        List Url Rewrites
        """
        pass

    def test_url_manager_list_url_rewrites2(self) -> None:
        """Test case for url_manager_list_url_rewrites2

        List Url Rewrites
        """
        pass

    def test_url_manager_list_url_rewrites_by_target_paths(self) -> None:
        """Test case for url_manager_list_url_rewrites_by_target_paths

        List Url Rewrites By Target Paths
        """
        pass

    def test_url_manager_list_url_rewrites_by_target_paths2(self) -> None:
        """Test case for url_manager_list_url_rewrites_by_target_paths2

        List Url Rewrites By Target Paths
        """
        pass

    def test_url_manager_resolve_url_rewrite(self) -> None:
        """Test case for url_manager_resolve_url_rewrite

        Resolve Url Rewrite
        """
        pass

    def test_url_manager_resolve_url_rewrite2(self) -> None:
        """Test case for url_manager_resolve_url_rewrite2

        Resolve Url Rewrite
        """
        pass


if __name__ == '__main__':
    unittest.main()
